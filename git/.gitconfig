[user]
	name = Nicolas Drebenstedt
	email = …
[core]
	excludesfile = ~/.gitignore
	editor = vim
	whitespace = trailing-space,space-before-tab
	pager = less -x1,5
[color]
	ui = auto
[color "branch"]
	current = red
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[filter "media"]
	clean = git-media-clean %f
	smudge = git-media-smudge %f
[alias]
	slog = log --pretty=oneline --abbrev-commit
	glog = log --graph --decorate --pretty=oneline --abbrev-commit
	tlog = log --no-walk --tags --pretty="%h %d %s" --decorate=full
	amend = commit --amend
	uncommit = reset HEAD^
	unstage = reset HEAD
	ls = ls-files
	co = checkout
	ci = commit
	mg = merge
	# UP: Pull in latest changes from your remote master.
	up = "!f() { git pull $(git config branch.master.remote) master; }; f"
	# OUT: See all outgoing commits that you would be pushing with a push.
	out = "!f() { git log --pretty=oneline --abbrev-commit $(git rev-parse --abbrev-ref --symbolic-full-name @{u})..HEAD; }; f"
	# MIT: Commit with an inline message and the current branch name as a prefix.
	mit = "!f() { if [[ -n \"$GIT_PREFIX\" ]]; then cd $GIT_PREFIX; fi && git commit -m \"$(git rev-parse --abbrev-ref HEAD): $(eval echo $1)\" $(echo ${*:2}); }; f"
	# TICK: List all ticket IDs amogst your local branches.
	tick = "!f() { : git log ; git log --oneline $@ | egrep -o [A-Z]+-[0-9]+ | sort | uniq; }; f"
	# CH: Commit that dreary changes file with a branch-prefixed commit message.
	ch = "!f() { git commit -m \"$(git rev-parse --abbrev-ref HEAD): Update changes\" $(git rev-parse --show-toplevel)/CHANGES*; }; f"
	# MPR: Merge pull request corresponding to the current branch into the configured master remote. 
	mpr = "!f() { export GIT_REMOTE='$(git config branch.master.remote)'; git pulls merge $(git pulls list|awk -v pattern='/$(git rev-parse --abbrev-ref HEAD)/' '$0 ~ pattern {p=1} END {print $1;}')"
	# SUBL: Open all modified files in sublime.
	subl = "!f() { sublime `for i in $(git status --porcelain | awk '{print $2}'); do git diff --no-prefix -U0 -- $i | awk 'NR==3{printf $2 \":\"}NR==5{gsub(/-/,\"\",$2);print $2}'; done;`; }; f"
	# PR: Create a pull-request using the github cli.
	pr = "!f() { hub pull-request -f -b $(git config branch.master.remote):master; }; f"
[push]
	default = current
[branch]
	autosetupmerge = true
[merge]
	defaultToUpstream = true
[advice]
	statusHints = false
[diff]
	renames = copies
[rerere]
	enabled = true
[github]
	token = …
	user = cutoffthetop
